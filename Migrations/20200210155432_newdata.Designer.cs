// <auto-generated />
using System;
using MLD.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MLD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200210155432_newdata")]
    partial class newdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MLD.Models.Circumference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("DistanceAround")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("PositionFromStart")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("Circumferences");
                });

            modelBuilder.Entity("MLD.Models.LymphSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAffected")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMeasuringPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumMeasuringPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LymphSites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAffected = false,
                            MaxMeasuringPoints = 8,
                            Name = "Head",
                            NumMeasuringPoints = 0
                        },
                        new
                        {
                            Id = 2,
                            IsAffected = false,
                            MaxMeasuringPoints = 30,
                            Name = "Right Arm",
                            NumMeasuringPoints = 0
                        },
                        new
                        {
                            Id = 3,
                            IsAffected = false,
                            MaxMeasuringPoints = 20,
                            Name = "Trunk",
                            NumMeasuringPoints = 0
                        },
                        new
                        {
                            Id = 4,
                            IsAffected = false,
                            MaxMeasuringPoints = 30,
                            Name = "Left Arm",
                            NumMeasuringPoints = 0
                        },
                        new
                        {
                            Id = 5,
                            IsAffected = false,
                            MaxMeasuringPoints = 8,
                            Name = "Groin",
                            NumMeasuringPoints = 0
                        },
                        new
                        {
                            Id = 6,
                            IsAffected = false,
                            MaxMeasuringPoints = 40,
                            Name = "Right Leg",
                            NumMeasuringPoints = 0
                        },
                        new
                        {
                            Id = 7,
                            IsAffected = false,
                            MaxMeasuringPoints = 40,
                            Name = "Left Leg",
                            NumMeasuringPoints = 0
                        });
                });

            modelBuilder.Entity("MLD.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LymphSiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("MLD.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test@test.com",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("MLD.Models.Circumference", b =>
                {
                    b.HasOne("MLD.Models.Measurement", null)
                        .WithMany("Circumferences")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
